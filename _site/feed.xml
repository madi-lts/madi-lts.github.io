<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://madi-lts.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://madi-lts.github.io/" rel="alternate" type="text/html" /><updated>2024-02-04T17:25:43-05:00</updated><id>https://madi-lts.github.io/feed.xml</id><title type="html">madi-lts</title><subtitle>A place for thoughts and projects.</subtitle><author><name>MJ Anderson</name></author><entry><title type="html">OpenCV with C++ and CUDA</title><link href="https://madi-lts.github.io/c++/2024/02/03/OpenCV-with-cpp.html" rel="alternate" type="text/html" title="OpenCV with C++ and CUDA" /><published>2024-02-03T00:00:00-05:00</published><updated>2024-02-03T00:00:00-05:00</updated><id>https://madi-lts.github.io/c++/2024/02/03/OpenCV-with-cpp</id><content type="html" xml:base="https://madi-lts.github.io/c++/2024/02/03/OpenCV-with-cpp.html"><![CDATA[<p>First install <code class="language-plaintext highlighter-rouge">opencv</code>. On arch linux, you may also need to install <code class="language-plaintext highlighter-rouge">vtk</code>, <code class="language-plaintext highlighter-rouge">glew</code>, and <code class="language-plaintext highlighter-rouge">fmt</code>. To compile and link a program:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g++ main.cpp `pkg-config --cflags opencv4` `pkg-config --libs opencv4` 
</code></pre></div></div>
<p>For a first program, let’s display an 8-bit monochrome image of white noise:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;random&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;opencv2/core.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;opencv2/imgcodecs.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;opencv2/highgui.hpp&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>
<span class="k">using</span> <span class="n">random_bytes_engine</span> <span class="o">=</span> 
    <span class="n">std</span><span class="o">::</span><span class="n">independent_bits_engine</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">default_random_engine</span><span class="p">,</span> 
                                 <span class="n">UINT8_WIDTH</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&gt;</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ImgSize</span> <span class="o">=</span> <span class="mi">512</span> <span class="o">*</span> <span class="mi">512</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span>
    

    <span class="n">random_bytes_engine</span> <span class="n">rbe</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">(</span><span class="n">ImgSize</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">generate</span><span class="p">(</span><span class="n">begin</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">end</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">rbe</span><span class="p">));</span>
    
    <span class="n">Mat</span> <span class="n">image</span> <span class="o">=</span> <span class="n">Mat</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="n">CV_8UC1</span><span class="p">,</span> 
                    <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">data</span><span class="p">()));</span>

    <span class="n">imshow</span><span class="p">(</span><span class="s">"Display window"</span><span class="p">,</span> <span class="n">image</span><span class="p">);</span> 
    <span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>OpenCV’s <code class="language-plaintext highlighter-rouge">imshow()</code> displays the image in a GUI window:
<img src="/assets/images/2024-02-03/opencv-test.png" alt="opencv imshow()" />
Note that the controls above allow us to pan, zoom, save, and copy the image to the clipboard.</p>

<h2 id="cuda">CUDA</h2>
<p>To integrate OpenCV with CUDA code, we could use the <code class="language-plaintext highlighter-rouge">nvcc</code> compiler and pass the same options as before:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc main.cu `pkg-config --cflags opencv4` `pkg-config --libs opencv4`
</code></pre></div></div>
<p>But since we also have a large amount of CPU only code, the proper way to develop here is to compile the CUDA code with <code class="language-plaintext highlighter-rouge">nvcc</code> into a library:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc -c cuda_code.cu
</code></pre></div></div>
<p>This will generate <code class="language-plaintext highlighter-rouge">cuda_code.o</code>, which we can then link using <code class="language-plaintext highlighter-rouge">g++</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g++ -o program `pkg-config --cflags opencv4` `pkg-config --libs opencv4 cuda cudart` cuda_code.o main.cpp  
</code></pre></div></div>
<p>To streamline this process, use a Make. Create a file named <code class="language-plaintext highlighter-rouge">makefile</code>:</p>
<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">all</span><span class="o">:</span> <span class="nf">program</span>

<span class="nl">program</span><span class="o">:</span> <span class="nf">cuda_code.o</span>
    <span class="err">g++</span> <span class="err">-o</span> <span class="err">program</span> <span class="err">`pkg-config</span> <span class="err">--cflags</span> <span class="err">opencv4`</span> <span class="err">`pkg-config</span> <span class="err">--libs</span> <span class="err">opencv4</span> <span class="err">cuda</span> <span class="err">cudart`</span> <span class="err">cuda_code.o</span> <span class="err">main.cpp</span> <span class="err">-I.</span>

<span class="nl">cuda_code.o</span><span class="o">:</span>
    <span class="err">nvcc</span> <span class="err">-c</span> <span class="err">cuda_code.cu</span>

<span class="nl">clean</span><span class="o">:</span>
    <span class="err">rm</span> <span class="err">-f</span> <span class="err">*.o</span> <span class="err">program</span>

</code></pre></div></div>
<p>The indentation in the <code class="language-plaintext highlighter-rouge">makefile</code> must be done with tabs, and every line must have an end of line character. 
So make sure to convert spaces to tabs in your text editor. Also note the <code class="language-plaintext highlighter-rouge">-I.</code> flag which tells <code class="language-plaintext highlighter-rouge">g++</code> to look
in the current directory.</p>]]></content><author><name>MJ Anderson</name></author><category term="c++" /><category term="c++," /><category term="opencv," /><category term="CUDA" /><summary type="html"><![CDATA[First install opencv. On arch linux, you may also need to install vtk, glew, and fmt. To compile and link a program: g++ main.cpp `pkg-config --cflags opencv4` `pkg-config --libs opencv4` For a first program, let’s display an 8-bit monochrome image of white noise:]]></summary></entry><entry><title type="html">Arch Linux Installation</title><link href="https://madi-lts.github.io/linux/2024/02/02/Arch-Linux-Installation.html" rel="alternate" type="text/html" title="Arch Linux Installation" /><published>2024-02-02T00:00:00-05:00</published><updated>2024-02-02T00:00:00-05:00</updated><id>https://madi-lts.github.io/linux/2024/02/02/Arch-Linux-Installation</id><content type="html" xml:base="https://madi-lts.github.io/linux/2024/02/02/Arch-Linux-Installation.html"><![CDATA[<p>Recently I switched from Windows back to linux for various C++ and CUDA development purposes. For a distro, I chose Arch, which I ended up installing on both my desktop and laptop. Here is my manual installation procedure, and current setup with Gnome 45:</p>

<p><img src="/assets/images/2024-02-02/gnome45.png" alt="Arch Linux with Gnome 45" /></p>

<p>In this post I’ll summarize what I learned through the Arch Wiki’s <a href="https://wiki.archlinux.org/title/Installation_guide">Installation Guide</a> and other sources, going from a barebones setup all the way to desktop environment. I will also detail my own personal selection of essential packages. Here we go!</p>

<hr />

<h2 id="booting-into-arch-and-preliminary-configuration">Booting into Arch and preliminary configuration</h2>

<ol>
  <li>Download Arch from <a href="https://archlinux.org/download/">archlinux.org/download/</a> and create a bootable USB drive, either from the commanda line or using an etching tool such as <a href="https://etcher.balena.io/">Balena Etcher</a>. Boot into BIOS by holding the appropriate key (e.g. F2 or del), and boot Arch from the USB drive.</li>
  <li>Verify that the boot mode is UEFI:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># cat /sys/firmware/efi/fw_platform_size
</code></pre></div>    </div>
    <p>The command should return <code class="language-plaintext highlighter-rouge">64</code>.</p>
  </li>
  <li>Connect to the internet with <code class="language-plaintext highlighter-rouge">iwd</code> using <code class="language-plaintext highlighter-rouge">iwctl</code>:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[iwd]# device list
[iwd]# device &lt;device&gt; set-property Powered on
[iwd]# adapter &lt;adapter&gt; set-property Powered on
[iwd]# station &lt;device&gt; scan
[iwd]# station &lt;device&gt; get-networks
[iwd]# station &lt;device&gt; connect &lt;SSID&gt;
</code></pre></div>    </div>
    <p>On the USB install medium, the DNS manager and DHCP client are preconfigured, but note that you will need to enable automatic</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/iwd/main.conf
---
[General]
EnableNetworkConfiguration=true
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>MJ Anderson</name></author><category term="linux" /><category term="arch," /><category term="linux," /><category term="gnome" /><summary type="html"><![CDATA[Recently I switched from Windows back to linux for various C++ and CUDA development purposes. For a distro, I chose Arch, which I ended up installing on both my desktop and laptop. Here is my manual installation procedure, and current setup with Gnome 45:]]></summary></entry><entry><title type="html">Jupyter Kernel</title><link href="https://madi-lts.github.io/data%20science/2020/04/28/Jupyter-Kernels.html" rel="alternate" type="text/html" title="Jupyter Kernel" /><published>2020-04-28T00:00:00-05:00</published><updated>2020-04-28T00:00:00-05:00</updated><id>https://madi-lts.github.io/data%20science/2020/04/28/Jupyter-Kernels</id><content type="html" xml:base="https://madi-lts.github.io/data%20science/2020/04/28/Jupyter-Kernels.html"><![CDATA[<p>Jupyter <code class="language-plaintext highlighter-rouge">sys.executable</code> should return the path to your Anaconda version of python: <code class="language-plaintext highlighter-rouge">'/Users/madi/opt/anaconda3/bin/python'</code>. If it doesn’t, there are probably overriding Jupyter kernels. In the terminal, run:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">jupyter kernelspec list
python2             	/Users/madi/Library/Jupyter/kernels/python2
python3             	/Users/madi/Library/Jupyter/kernels/python3</code></pre></figure>

<p>Tell Jupyter to look for the Anaconda kernels by uninstalling the overriding kernels:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">jupyter kernelspec uninstall python2
jupyter kernelspec uninstall python3</code></pre></figure>

<p>Now <code class="language-plaintext highlighter-rouge">sys.executable</code> should return the path to your Anaconda version of python.</p>]]></content><author><name>MJ Anderson</name></author><category term="data science" /><category term="environment" /><category term="management" /><summary type="html"><![CDATA[Jupyter sys.executable should return the path to your Anaconda version of python: '/Users/madi/opt/anaconda3/bin/python'. If it doesn’t, there are probably overriding Jupyter kernels. In the terminal, run:]]></summary></entry><entry><title type="html">Logistic Regression</title><link href="https://madi-lts.github.io/data%20science/2020/04/28/Logistic-Regression.html" rel="alternate" type="text/html" title="Logistic Regression" /><published>2020-04-28T00:00:00-05:00</published><updated>2020-04-28T00:00:00-05:00</updated><id>https://madi-lts.github.io/data%20science/2020/04/28/Logistic-Regression</id><content type="html" xml:base="https://madi-lts.github.io/data%20science/2020/04/28/Logistic-Regression.html"><![CDATA[<p>Consider a binary classification problem where we have data consisting of 3 parameters, \(\{(x,y,z)_i\}\), and a binary variable \(q_i\), taking values of 0 or 1, where \(i\) takes values 1 to \(n\). For example, \((x,y,z)_j\) might represent the location of the \(j\)th person in an apartment complex and \(q_j\) might represent whether or not they test positive for an infectious disease. The data may be clustered or grouped with respect to the category, or it may not. Below is an example where the data exhibit two clusters:</p>

<p><img src="/assets/images/2020-04-28/2d-category-data.png" alt="2D classification data" /></p>

<p>A human can easily make a qualitative judgement and draw a line (or a plane) separating the infected and uninfected clusters. We would like to see if we can let our computer do this through a fitting routine.</p>

<p>A plane may be specified by a normal unit vector \(\hat{\mathbf{n}}\) and a point \(\mathbf{p}\). Every point \(\mathbf{r}\) in the plane satisfies</p>

\[\hat{\mathbf{n}}\cdot(\mathbf{r}-\mathbf{p}) = 0.\]

<p>Since there are infinite choices for \(\mathbf{p}\), and \(\mathbf{r}\) is arbitrary, \((\mathbf{r}-\mathbf{p})\) could be any vector in the plane, and then this simply says that any vector lying in the plane must be perpendicular to \(\hat{\mathbf{n}}\). But most importantly for points to one side of the plane, we have</p>

\[\hat{\mathbf{n}}\cdot(\mathbf{r}-\mathbf{p}) &gt; 0,\]

<p>and to the other side we have</p>

\[\hat{\mathbf{n}}\cdot(\mathbf{r}-\mathbf{p}) &lt; 0.\]

<p>This behavior is just what we want to plug into some approximately binary function and model the classification problem. A good choice for a smooth approximately binary model is the logistic function:</p>

\[h(z) = \frac{1}{1+e^{-z}}.\]

<p>Over most of the real line this function is approximately 0 (at \(z\to -\infty\)) or 1 (as \(z\to + \infty\)) and it “turns on” in the region near \(z=0\). If we let</p>

\[z(\mathbf{r}) = \hat{\mathbf{n}}\cdot(\mathbf{r}-\mathbf{p}),\]

<p>then we see that \(h(z(\mathbf{r}))\) will be approximately 0 to one side of the plane and 1 to the other.</p>

<p>Since we don’t know <em>a priori</em> what \(\hat{\mathbf{n}}\) or \(\mathbf{p}\) should be (at least not without doing the computer’s job), we may as well call \(-\hat{\mathbf{n}}\cdot\mathbf{p} = \beta_0\). With these definitions</p>

\[\hat{\mathbf{n}}\cdot(\mathbf{r}-\mathbf{p}) = \hat{\mathbf{n}}\cdot\mathbf{r}+\beta_0,\]

<p>we see that the appropriate classifying function is</p>

\[h(z) = \frac{1}{1+e^{-\hat{\mathbf{n}}\cdot\mathbf{r}-\beta_0}}.\]

<p>One final modification is that we need to allow for the width of the turn on region to be adjusted. This means that we should allow the normal vector for the plane to be of any length, giving the usual form for the logistic function:</p>

\[h(\beta_i,x_i) = \frac{1}{1+e^{-\beta_0-\beta_i x_i}},\]

<p>with Einstein summation over the spatial indices \(i\).</p>

<p>Let’s see how this model performs using <code class="language-plaintext highlighter-rouge">lmfit</code> to fit some clustered data generated with <code class="language-plaintext highlighter-rouge">scikit-learn</code>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Data</th>
      <th style="text-align: center">Fit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="/assets/images/2020-04-28/2d-category-data.png" width="90%" /></td>
      <td style="text-align: center"><img src="/assets/images/2020-04-28/2d-category-fit.png" width="90%" /></td>
    </tr>
  </tbody>
</table>]]></content><author><name>MJ Anderson</name></author><category term="data science" /><category term="fitting," /><category term="classification" /><summary type="html"><![CDATA[Consider a binary classification problem where we have data consisting of 3 parameters, \(\{(x,y,z)_i\}\), and a binary variable \(q_i\), taking values of 0 or 1, where \(i\) takes values 1 to \(n\). For example, \((x,y,z)_j\) might represent the location of the \(j\)th person in an apartment complex and \(q_j\) might represent whether or not they test positive for an infectious disease. The data may be clustered or grouped with respect to the category, or it may not. Below is an example where the data exhibit two clusters:]]></summary></entry><entry><title type="html">MathJax setup</title><link href="https://madi-lts.github.io/2020/04/24/MathJax.html" rel="alternate" type="text/html" title="MathJax setup" /><published>2020-04-24T00:00:00-05:00</published><updated>2020-04-24T00:00:00-05:00</updated><id>https://madi-lts.github.io/2020/04/24/MathJax</id><content type="html" xml:base="https://madi-lts.github.io/2020/04/24/MathJax.html"><![CDATA[<p>MathJax renders LaTeX to CSS/webfonts/SVG for high quality web-typography. Here’s an inline equation,
\(|\Phi^+\rangle = \frac{1}{\sqrt{2}} (|0\rangle_A \otimes |0\rangle_B + |1\rangle_A \otimes |1\rangle_B)\), and here’s a display-style equation:</p>

\[R_{\mu\nu} - \frac{1}{2}Rg_{\mu\nu} + \Lambda g_{\mu\nu} = \frac{8\pi G}{c^4}T_{\mu\nu}.\]

<p>This post explains how to deploy MathJax within Jekyll. First, create <code class="language-plaintext highlighter-rouge">_includes/mathjax.html</code>:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">{% if page.mathjax %}
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">async</span>
  <span class="na">src=</span><span class="s">"https://cdnjs.clouwdflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span>
{% endif %}</code></pre></figure>

<p>Then include MathJax in a layout. Create <code class="language-plaintext highlighter-rouge">_layouts/page.html</code>:</p>

<figure class="highlight"><pre><code class="language-liquid" data-lang="liquid">---
layout: default
mathjax: true
---
<span class="cp">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span>mathjax.html<span class="w"> </span><span class="cp">%}</span>
<span class="cp">{{</span><span class="w"> </span><span class="nv">content</span><span class="w"> </span><span class="cp">}}</span></code></pre></figure>

<p>You can now use <code class="language-plaintext highlighter-rouge">$$[...]$$</code> for inline math and</p>

<figure class="highlight"><pre><code class="language-tex" data-lang="tex"><span class="p">$$</span><span class="o">[</span><span class="nb">...</span><span class="o">]</span><span class="p">$$</span></code></pre></figure>

<p>for display-style math. That’s it!</p>]]></content><author><name>MJ Anderson</name></author><summary type="html"><![CDATA[MathJax renders LaTeX to CSS/webfonts/SVG for high quality web-typography. Here’s an inline equation, \(|\Phi^+\rangle = \frac{1}{\sqrt{2}} (|0\rangle_A \otimes |0\rangle_B + |1\rangle_A \otimes |1\rangle_B)\), and here’s a display-style equation:]]></summary></entry><entry><title type="html">Jekyll and Hyde(out) setup</title><link href="https://madi-lts.github.io/2020/04/23/Jekyll.html" rel="alternate" type="text/html" title="Jekyll and Hyde(out) setup" /><published>2020-04-23T00:00:00-05:00</published><updated>2020-04-23T00:00:00-05:00</updated><id>https://madi-lts.github.io/2020/04/23/Jekyll</id><content type="html" xml:base="https://madi-lts.github.io/2020/04/23/Jekyll.html"><![CDATA[<p>Jekyll is a ruby-based static site generator that’s perfect for small sites. This post outlines how I set up this site with Jekyll. For a detailed walkthrough, see the instructions on <a href="https://jekyllrb.com/docs/installation/macos/">jekyllrb.com</a>.</p>

<p>First, you’ll need to install Ruby, and make sure you have &gt;2.5.0. Use <a href="https://github.com/rbenv/rbenv">rbenv</a> if you need to manage multiple Ruby versions:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Install rbenv and ruby-build
brew install rbenv

# Set up rbenv integration with your shell
rbenv init

# Check your installation
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash

# Install and use ruby 2.7.1
rbenv install 2.7.1
rbenv global 2.7.1
</code></pre></div></div>

<p>Now install Jekyll and Bundler</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install --user-install bundler jekyll
</code></pre></div></div>

<p>Get your ruby version</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby -v
ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c)
</code></pre></div></div>

<p>and add it to your path by adding the following to your shell configuration file, <code class="language-plaintext highlighter-rouge">.bash_profile</code> or otherwise:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PATH="$HOME/.gem/ruby/X.X.0/bin:$PATH"
</code></pre></div></div>

<p>Finally, install Jekyll and Bundler:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install --user-install bundler jekyll
</code></pre></div></div>

<h2 id="theme-setup">Theme Setup</h2>

<p>Now you can fork the theme you want to use – for this site, I’m using <a href="https://github.com/fongandrew/hydeout">Hydeout</a> – and download it so you can add your content.</p>

<p>In your project directory, create a Gemfile:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle init
</code></pre></div></div>

<p>For Hydeout add <code class="language-plaintext highlighter-rouge">jekyll-pageinate</code>, <code class="language-plaintext highlighter-rouge">jekyll-gist</code> and <code class="language-plaintext highlighter-rouge">jekyll-feed</code> to your Gemfile and run <code class="language-plaintext highlighter-rouge">bundle install</code> and <code class="language-plaintext highlighter-rouge">bundle update</code> to install everything.</p>

<p>Finally, to get Hydeout to work live, change your <code class="language-plaintext highlighter-rouge">baseurl:</code> to <code class="language-plaintext highlighter-rouge">http://[username].github.io</code> if you’re using Github pages, or the correct domain name otherwise.</p>

<p>You should now be able to build and run with Jekyll:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll build
jekyll serve
</code></pre></div></div>

<p>Visit <a href="http://localhost:4000">http://localhost:4000</a> to view your site!</p>]]></content><author><name>MJ Anderson</name></author><summary type="html"><![CDATA[Jekyll is a ruby-based static site generator that’s perfect for small sites. This post outlines how I set up this site with Jekyll. For a detailed walkthrough, see the instructions on jekyllrb.com.]]></summary></entry></feed>